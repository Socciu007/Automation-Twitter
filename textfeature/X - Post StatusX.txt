const delay = (timeout) =>
  new Promise((resolve) => setTimeout(resolve, timeout));
const random = (min, max) => {
  return Math.floor(Math.random() * (max - min + 1)) + min;
};
let logErrors = [];
async function featurePostStatusX(page, scrollTime, body = {}) {
  try {
    await page.goto("https://twitter.com", {
        timeout: 60000,
        waitUntil: "networkidle2",
      });
await delay(random(2000, 5000));
const currentUrl = await page.url();
      if (!currentUrl.includes("twitter.com/home")) {
        logErrors.push({
          error: "title error",
          detail: "You need to log in X",
        });
        return;
      }
await delay(random(2000, 5000));
    const scrollTimeInMilliseconds = scrollTime * 60 * 1000;
    const startTime = new Date().getTime();
    let currentTime = new Date().getTime();
    while (currentTime - startTime < scrollTimeInMilliseconds) {
      await page.mouse.wheel({ deltaY: random(500, 1000) });
      await delay(random(2000, 5000));
      currentTime = new Date().getTime();
    }
    await delay(random(2000, 5000));
    const data = [
      "Hôm nay that la zuiii",
      "Thật là tuyệt vời",
      "Viet nam ....",
      "hanh phuc qua...",
    ];
    const elementPost = await page.$(
      'a[data-testid="SideNav_NewTweet_Button"]'
    );
    if (elementPost) {
      await elementPost.click();
      await delay(random(2000, 5000));
      await page.type(
        'div[data-contents="true"] > div[data-block="true"]',
        data[Math.floor(Math.random() * data.length)]
      );
      await delay(random(2000, 5000));
    } else {
      try {
        await page.type(
          'div[data-testid="tweetTextarea_0"]',
          data[Math.floor(Math.random() * data.length)]
        );
        await delay(random(2000, 5000));
      } catch (error) {
        logErrors.push({
          error: "title error",
          detail: error.message,
        });
        return;
      }
    }
    const { status, gif, emoji, poll } = body;
    if (status) {
      try {
        const clickStatus = await page.$(status);
        if (!clickStatus) {
          logErrors.push({
            error: "title error",
            detail: "Can't button status",
          });
          return;
        }
        await clickStatus.click();
        await delay(random(2000, 5000));
        const selectStatus = await page.$$('div[role="menuitem"]'); //4 option: [ everyone, accounts you follow, verified accounts, only accounts you mention]
        if (!selectStatus) {
          logErrors.push({
            error: "title error",
            detail: "Can't select status for postX",
          });
          return;
        }
        await selectStatus[0].click();
        await delay(random(2000, 5000));
      } catch (error) {
        logErrors.push({
          error: "title error",
          detail: error.message,
        });
        return;
      }
    }
    if (gif) {
      try {
        const buttonGif = await page.$(gif);
        if (!buttonGif) {
          logErrors.push({
            error: "title error",
            detail: "Can't select gif",
          });
          return;
        }
        await buttonGif.click();
        await delay(random(2000, 5000));

        const selectGif = await page.$$('div > img[draggable="false"]');
        if (!selectGif) {
          logErrors.push({
            error: "title error",
            detail: "Can't select topic gif",
          });
          return;
        }
        const selectedGif = selectGif.slice(0, 8);
        const indexRandom_0 = Math.floor(Math.random() * 8);
        await delay(random(2000, 5000));
        await selectedGif[indexRandom_0].click();
        await delay(random(2000, 5000));

        const clickGif = await page.$$(
          'div[data-testid="gifSearchGifImage"] > img[draggable="false"]'
        );
        const indexRandom_1 = Math.floor(Math.random() * 10);
        await delay(random(2000, 5000));
        await clickGif[indexRandom_1].click();
        await delay(random(2000, 5000));
      } catch (error) {
        logErrors.push({
          error: "title error",
          detail: error.message,
        });
        return;
      }
    }

    if (emoji) {
      try {
        const clickEmoji = await page.$(emoji);
        await clickEmoji.click();
        await delay(random(2000, 5000));

        const selectEmoji = await page.$$('div[aria-selected="false"]');
        const indexRandom = Math.floor(Math.random() * 50);
        await delay(random(2000, 5000));
        await selectEmoji[indexRandom].click();
        await delay(random(2000, 5000));
        console.log("Chon emoji thanh cong");
      } catch (error) {
        console.log("Khong the chon emoji");
      }
    }
    if (poll) {
      try {
        const clickPoll = await page.$(poll);
        if (!clickPoll) {
          logErrors.push({
            error: "title error",
            detail: "Can't find button poll of post",
          });
          return;
        }
        await clickPoll.click();
        await delay(random(2000, 5000));
        try {
          await page.type(
            "input[name=Choice1]",
            data[Math.floor(Math.random() * data.length)]
          );
          await delay(random(2000, 5000));
          await page.type(
            "input[name=Choice2]",
            data[Math.floor(Math.random() * data.length)]
          );
          await delay(random(2000, 5000));
        } catch (error) {
          logErrors.push({
            error: "title error",
            detail: error.message,
          });
          return;
        }
      } catch (error) {
        logErrors.push({
          error: "title error",
          detail: error.message,
        });
        return;
      }
    }
    await delay(random(2000, 5000));
    const clickPost_0 = await page.$('div[data-testid="tweetButtonInline"]');
    const clickPost_1 = await page.$('div[data-testid="tweetButton"]');
    if (clickPost_0 || clickPost_1) {
      try {
        await delay(random(2000, 5000));
        await clickPost_1.click();
        await delay(random(2000, 5000));
        await clickPost_0.click();
        await delay(random(2000, 5000));
      } catch (error) {
        logErrors.push({
          error: "title error",
          detail: error.message,
        });
        return;
      }
    }
  } catch (error) {
    logErrors.push({
      error: "title error",
      detail: error.message,
    });
  }
}
try {
await featurePostStatusX(page, 0.5, {
  status: 'div[aria-label="Everyone can reply"]',
  poll: 'div[aria-label="Add poll"]',
});
} catch (error) {
    logErrors.push({
        error: "title error",
        detail: error.message,
      });
}
return logErrors;